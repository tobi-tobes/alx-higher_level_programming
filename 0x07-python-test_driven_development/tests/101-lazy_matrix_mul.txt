========================================
 How to Use 101-lazy_lazy_matrix_mul.py
========================================

This module has only has one function called
``lazy_matrix_mul()``.

Output
=======

``lazy_matrix_mul()`` multiplies two matrices together
and returns the product. The matrices must contain
either integers or floats. The numbers can be negative
or positive.

::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]
    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]
    >>> print(lazy_matrix_mul([[1, 2.1]], [[3, 4], [5, 6]]))
    [[13.5 16.6]]
    >>> print(lazy_matrix_mul([[1, 2]], [[3, -4], [5, 6]]))
    [[13  8]]

Errors
======

If either argument is not a matrix of integers/floats,
a TypeError will be raised. If either argument is empty, a
ValueError will be raised. If the number of columns in the
first argument is not equal to the number of rows in the
second argument, the matrices cannot be multiplied and a
ValueError will be raised. Also, the matrices must be
rectangles (each row must be the same size).

::

    >>> lazy_matrix_mul([[1, 2], [3, 4, 3]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 4]])
    Traceback (most recent call last):
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4], [4, 5]], [[1, 2], [3, 4], [4, 5]])
    Traceback (most recent call last):
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 3) != 2 (dim 3)

    >>> lazy_matrix_mul([([1, 2], 4), [3, 4], [4, 5]], [[1, 2], [3, 4], [4, 5]])
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, 2], [3, 4], [4, 5]], [])
    Traceback (most recent call last):
    ValueError: shapes (0,3) and (0,0) not aligned: 3 (dim 0) != 0 (dim 3)

    >>> lazy_matrix_mul([[1, 2], [3, 4], [4, 5]], [[]])
    Traceback (most recent call last):
    ValueError: shapes (0,3) and (0,0) not aligned: 3 (dim 1) != 0 (dim 3)

    >>> lazy_matrix_mul([], [[1, 3], [2, 4]])
    Traceback (most recent call last):
    ValueError: shapes (2,0) and (2,2) not aligned: 0 (dim 2) != 2 (dim 0)

    >>> lazy_matrix_mul([[]], [[1, 3], [2, 4]])
    Traceback (most recent call last):
    ValueError: shapes (2,1) and (2,2) not aligned: 1 (dim 2) != 2 (dim 1)

    >>> lazy_matrix_mul([[1, 2], [3, 4], [4, 5]], "[]")
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul("Hello", [[1, 3], [2, 4]])
    Traceback (most recent call last):
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[1, 2], [3, 4], [4, 5]])
    Traceback (most recent call last):
    ValueError: shapes (1,3) and (1,1) not aligned: 3 (dim 1) != 1 (dim 3)

    >>> print(lazy_matrix_mul())
    [[1]]
